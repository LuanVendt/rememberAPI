// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model usuarios {
    id                     Int                      @id @unique @default(autoincrement())
    id_tema                Int                      @default(1)
    id_avatar              Int                      @default(1)
    nome                   String
    email                  String                   @unique
    data_nasc              DateTime
    telefone               String
    senha                  String
    xp                     Int                      @default(0)
    criado_em              DateTime
    editado_em             DateTime?
    excluido_em            DateTime?
    tarefas                tarefas[]
    usuario_medalha        usuario_avatar?
    consultas              consultas[]
    transacoes_financeiras transacoes_financeiras[]
    refreshToken           refresh_token[]

    temas    temas    @relation(fields: [id_tema], references: [id])
    avatares avatares @relation(fields: [id_avatar], references: [id])
}

model tarefas {
    id              Int       @id @unique @default(autoincrement())
    id_usuario      Int
    id_categoria    Int
    id_status       Int
    id_prioridade   Int
    nome            String
    descricao       String?
    anotacao        String?
    data_criacao    DateTime  @default(now())
    data_vencimento DateTime?
    finalizado_em   DateTime?
    notificado      Boolean   @default(false)
    criado_em       DateTime
    editado_em      DateTime?
    excluido_em     DateTime?

    usuarios     usuarios       @relation(fields: [id_usuario], references: [id])
    status       status         @relation(fields: [id_status], references: [id])
    categoria    categorias     @relation(fields: [id_categoria], references: [id])
    prioridade   prioridade     @relation(fields: [id_prioridade], references: [id])
    anexos       anexos[]
    lista_tarefa lista_tarefa[]
}

model lista_tarefa {
    id        Int      @id @unique @default(autoincrement())
    id_tarefa Int
    descricao String
    criado_em DateTime @default(now())
    status    Boolean

    tarefas tarefas @relation(fields: [id_tarefa], references: [id])

    @@unique([id, id_tarefa])
}

model categorias {
    id      Int       @id @unique @default(autoincrement())
    nome    String
    tarefas tarefas[]
}

model prioridade {
    id      Int       @id @unique @default(autoincrement())
    nome    String
    tarefas tarefas[]
}

model status {
    id      Int       @id @unique @default(autoincrement())
    nome    String
    tarefas tarefas[]
}

model anexos {
    id         Int      @id @unique @default(autoincrement())
    id_tarefa  Int
    nome       String
    url        String
    data_anexo DateTime @default(now())

    tarefas tarefas @relation(fields: [id_tarefa], references: [id])
}

model temas {
    id                Int        @id @unique @default(autoincrement())
    nome              String
    primaryColor      String
    secondaryColor    String
    tertiaryColor     String
    quaternaryColor   String
    inputColor        String
    fontColor         String
    iconColor         String
    shadowColor       String
    userColor         String
    gradient1Color    String
    gradient2Color    String
    borderBottomColor String
    svgColor          String
    btnAltaColor      String
    btnMediaColor     String
    btnBaixaColor     String
    ativo             Boolean
    usuarios          usuarios[]
}

model avatares {
    id              Int             @id @unique @default(autoincrement())
    nome            String
    qtde_xp         Int
    url_foto        String
    usuario_medalha usuario_avatar?
    usuarios        usuarios[]
}

model usuario_avatar {
    id_usuario Int @unique
    id_medalha Int @unique

    usuario usuarios @relation(fields: [id_usuario], references: [id])
    medalha avatares @relation(fields: [id_medalha], references: [id])

    @@id([id_medalha, id_usuario])
}

model consultas {
    id             Int      @id @unique @default(autoincrement())
    id_usuario     Int
    nome_medico    String
    especializacao String
    data           DateTime
    local          String
    descricao      String

    usuario usuarios @relation(fields: [id_usuario], references: [id])
}

model transacoes_financeiras {
    id            Int       @id @unique @default(autoincrement())
    id_usuario    Int
    descricao     String
    preco         Float
    categoria     String
    criado_em     DateTime  @default(now())
    vencimento_em DateTime?
    tipo          String

    usuario usuarios @relation(fields: [id_usuario], references: [id])
}

model refresh_token {
    id           Int     @id @unique @default(autoincrement())
    refreshToken String
    id_usuario   Int
    usado        Boolean @default(false)

    usuario usuarios @relation(fields: [id_usuario], references: [id])
}
